/**
 * Logger
 */
export default class Logger {
    private notUseGroup;
    private readonly replacer;
    private static isRequiredEndGroup;
    /**
     * @param {function|undefined} replacer replacer
     * @param {boolean} notUseGroup not use group?
     */
    constructor(replacer?: (string: string) => string, notUseGroup?: boolean);
    /**
     * @param {string} message message
     * @return {string[]} messages
     */
    private splitMessage;
    /**
     * @param {string} message message
     * @param {any[]} args args
     * @return {string} output string
     */
    private getOutputString;
    /**
     * @param {function} output output function
     * @param {function|null} replacer replacer
     * @param {string|string[]} message message
     * @param {any[]} args args
     */
    private multiLineOutput;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    log: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    info: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    debug: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    error: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    warn: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @param {any[]} args args
     * @return {void}
     */
    displayCommand: (message: string | string[], ...args: any[]) => void;
    /**
     * @param {string|string[]} message message
     * @return {void}
     */
    displayStdout: (message: string | string[]) => void;
    /**
     * @param {string|string[]} message message
     * @return {void}
     */
    displayStderr: (message: string | string[]) => void;
    /**
     * @param {string} message message
     * @param {any[]} args args
     * @return {void}
     */
    startProcess: (message: string, ...args: any[]) => void;
    /**
     * @return {void}
     */
    endProcess: () => void;
    /**
     * @return {void}
     */
    static resetForTesting: () => void;
}
