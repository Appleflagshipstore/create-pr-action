"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const github_action_helper_1 = require("@technote-space/github-action-helper");
const command_1 = require("./command");
const misc_1 = require("./misc");
const constant_1 = require("../constant");
const { sleep, getBranch } = github_action_helper_1.Utils;
const { isPr, isPush } = github_action_helper_1.ContextHelper;
const commonLogger = new github_action_helper_1.Logger(misc_1.replaceDirectory);
const getResult = (result, detail, context) => ({
    result,
    detail,
    branch: misc_1.getPrHeadRef(context),
});
const checkActionPr = (logger, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    const pr = yield command_1.getApiHelper(logger).findPullRequest(misc_1.getPrHeadRef(context), octokit, context.actionContext);
    if (!pr) {
        return getResult('failed', 'not found', context);
    }
    if (pr.base.ref === context.defaultBranch) {
        return true;
    }
    const basePr = yield command_1.getApiHelper(logger).findPullRequest(pr.base.ref, octokit, context.actionContext);
    if (!basePr) {
        yield command_1.closePR(misc_1.getPrHeadRef(context), logger, octokit, context, '');
        return getResult('succeeded', 'has been closed because base PullRequest does not exist', context);
    }
    if (basePr.state === 'closed') {
        yield command_1.closePR(misc_1.getPrHeadRef(context), logger, octokit, context, '');
        return getResult('succeeded', 'has been closed because base PullRequest has been closed', context);
    }
    return true;
});
const createPr = (makeGroup, logger, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (makeGroup) {
        commonLogger.startProcess('Target PullRequest Ref [%s]', misc_1.getPrHeadRef(context));
    }
    if (misc_1.isActionPr(context)) {
        const result = yield checkActionPr(logger, octokit, context);
        if (result !== true) {
            return result;
        }
    }
    else if (!misc_1.isTargetBranch(misc_1.getPrHeadRef(context), context)) {
        return getResult('skipped', 'This is not target branch', context);
    }
    const helper = misc_1.getHelper(context);
    const { files, output } = yield command_1.getChangedFiles(helper, logger, context);
    const branchName = yield misc_1.getPrBranchName(helper, context);
    let result = 'succeeded';
    let detail = 'updated';
    let mergeable = false;
    if (!files.length) {
        logger.info('There is no diff.');
        const pr = yield command_1.getApiHelper(logger).findPullRequest(branchName, octokit, context.actionContext);
        if (!pr) {
            // There is no PR
            return getResult('skipped', 'There is no diff', context);
        }
        if (!(yield command_1.getRefDiff(misc_1.getPrHeadRef(context), helper, logger, context)).length) {
            // Close if there is no diff
            yield command_1.closePR(branchName, logger, octokit, context);
            return getResult('succeeded', 'There is no reference diff', context);
        }
        mergeable = yield command_1.isMergeable(pr.number, octokit, context);
        if (mergeable) {
            result = 'skipped';
            detail = 'There is no diff';
        }
    }
    else {
        // Commit local diffs
        yield command_1.commit(helper, logger, context);
        if (!(yield command_1.getRefDiff(misc_1.getPrHeadRef(context), helper, logger, context)).length) {
            // Close if there is no diff
            yield command_1.closePR(branchName, logger, octokit, context);
            return getResult('succeeded', 'has been closed because there is no reference diff', context);
        }
        yield command_1.push(branchName, helper, logger, context);
        mergeable = yield command_1.updatePr(branchName, files, output, helper, logger, octokit, context);
    }
    if (!mergeable) {
        // Resolve conflicts if PR is not mergeable
        yield command_1.resolveConflicts(branchName, helper, logger, octokit, context);
    }
    return getResult(result, detail, context);
});
const createCommit = (logger, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    const branchName = getBranch(context.actionContext);
    if (!misc_1.isTargetBranch(branchName, context)) {
        return;
    }
    const helper = misc_1.getHelper(context);
    const { files } = yield command_1.getChangedFiles(helper, logger, context);
    if (!files.length) {
        logger.info('There is no diff.');
        return;
    }
    yield command_1.commit(helper, logger, context);
    try {
        yield command_1.push(branchName, helper, logger, context);
    }
    catch (error) {
        if (/protected branch hook declined/.test(error.message)) {
            logger.warn('Branch [%s] is protected.', branchName);
            return;
        }
        throw error;
    }
});
const outputResult = (result, endProcess = false) => {
    const mark = {
        'succeeded': commonLogger.c('✔', 'green'),
        'failed': commonLogger.c('×', 'red'),
        'skipped': commonLogger.c('→', 'yellow'),
    };
    if (endProcess) {
        commonLogger.endProcess();
    }
    commonLogger.info(mark[result.result] + '\t[%s] %s', result.branch, result.detail);
};
const outputResults = (results) => {
    const total = results.length;
    const succeeded = results.filter(item => item.result === 'succeeded').length;
    const failed = results.filter(item => item.result === 'failed').length;
    commonLogger.startProcess('Total:%d  Succeeded:%d  Failed:%d  Skipped:%d', total, succeeded, failed, total - succeeded - failed);
    results.forEach(result => outputResult(result));
};
const getActionContext = (context, pull) => (Object.assign(Object.assign({}, context), { actionContext: Object.assign({}, context.actionContext, {
        payload: {
            'pull_request': {
                number: pull.number,
                id: pull.id,
                head: pull.head,
                base: pull.base,
                title: pull.title,
                'html_url': pull.html_url,
            },
        },
        repo: {
            owner: pull.base.repo.owner.login,
            repo: pull.base.repo.name,
        },
        ref: pull.head.ref,
    }) }));
const runCreatePr = (getPulls, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    var e_1, _a;
    const logger = new github_action_helper_1.Logger(misc_1.replaceDirectory, true);
    const results = [];
    try {
        for (var _b = __asyncValues(getPulls(octokit, context)), _c; _c = yield _b.next(), !_c.done;) {
            const pull = _c.value;
            try {
                results.push(yield createPr(true, logger, octokit, getActionContext(context, pull)));
            }
            catch (error) {
                results.push(getResult('failed', error.message, getActionContext(context, pull)));
            }
            yield sleep(constant_1.INTERVAL_MS);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    yield outputResults(results);
});
/**
 * @param {GitHub} octokit octokit
 * @param {Context} context context
 * @return {AsyncIterable} pull
 */
function pullsForSchedule(octokit, context) {
    return __asyncGenerator(this, arguments, function* pullsForSchedule_1() {
        const logger = new github_action_helper_1.Logger(misc_1.replaceDirectory, true);
        yield __await(yield* __asyncDelegator(__asyncValues(yield __await(command_1.getApiHelper(logger).pullsList({}, octokit, context.actionContext)))));
        if (misc_1.checkDefaultBranch(context)) {
            yield yield __await(misc_1.getPullsArgsForDefaultBranch(context));
        }
    });
}
const runCreatePrAll = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return runCreatePr(pullsForSchedule, octokit, context); });
/**
 * @param {GitHub} octokit octokit
 * @param {Context} context context
 * @return {AsyncIterable} pull
 */
function pullsForClosed(octokit, context) {
    return __asyncGenerator(this, arguments, function* pullsForClosed_1() {
        const logger = new github_action_helper_1.Logger(misc_1.replaceDirectory, true);
        yield __await(yield* __asyncDelegator(__asyncValues(yield __await(command_1.getApiHelper(logger).pullsList({
            base: getBranch(misc_1.getPrHeadRef(context), false),
        }, octokit, context.actionContext)))));
        yield __await(yield* __asyncDelegator(__asyncValues(yield __await(command_1.getApiHelper(logger).pullsList({
            head: `${context.actionContext.repo.owner}:${getBranch(misc_1.getPrBaseRef(context), false)}`,
        }, octokit, context.actionContext)))));
    });
}
const runCreatePrClosed = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return runCreatePr(pullsForClosed, octokit, context); });
exports.execute = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (misc_1.isClosePR(context)) {
        yield runCreatePrClosed(octokit, context);
    }
    else if (isPush(context.actionContext)) {
        yield createCommit(commonLogger, octokit, context);
    }
    else if (isPr(context.actionContext)) {
        yield outputResult(yield createPr(false, commonLogger, octokit, context), true);
    }
    else {
        yield runCreatePrAll(octokit, context);
    }
    commonLogger.endProcess();
});
//# sourceMappingURL=process.js.map