import { GitHelper } from '@technote-space/github-action-helper';
import { GitHub } from '@actions/github';
import { ActionContext, PullsParams, PayloadPullsParams } from '../types';
export declare const getActionDetail: <T>(key: string, context: ActionContext, defaultValue?: (() => T) | undefined) => T;
export declare const replaceDirectory: (message: string) => string;
export declare const getDefaultBranchUrl: (octokit: GitHub, context: ActionContext) => Promise<string>;
export declare const getPrHeadRef: (context: ActionContext) => string;
export declare const getPrBaseRef: (context: ActionContext) => string;
export declare const isActionPr: (context: ActionContext) => boolean;
export declare const getContextBranch: (context: ActionContext) => string;
export declare const isDefaultBranch: (octokit: GitHub, context: ActionContext) => Promise<boolean>;
export declare const checkDefaultBranch: (context: ActionContext) => boolean;
export declare const isDisabledDeletePackage: (context: ActionContext) => boolean;
export declare const isClosePR: (context: ActionContext) => boolean;
export declare const isTargetBranch: (branchName: string, octokit: GitHub, context: ActionContext) => Promise<boolean>;
export declare const isTargetContext: (octokit: GitHub, context: ActionContext) => Promise<boolean>;
export declare const getGitFilterStatus: (context: ActionContext) => string | undefined;
export declare const filterGitStatus: (line: string, context: ActionContext) => boolean;
export declare const filterExtension: (line: string, context: ActionContext) => boolean;
export declare const getHelper: (context: ActionContext) => GitHelper;
export declare const getPullsArgsForDefaultBranch: (octokit: GitHub, context: ActionContext) => Promise<PullsParams>;
export declare const ensureGetPulls: (pull: PayloadPullsParams | null | undefined, octokit: GitHub, context: ActionContext) => Promise<PayloadPullsParams>;
export declare const getActionContext: (pull: PayloadPullsParams | null | undefined, octokit: GitHub, context: ActionContext) => Promise<ActionContext>;
export declare const getCacheKey: (method: string, args?: {}) => string;
export declare const getCache: <T>(key: string, generator: () => T | Promise<T>, context: ActionContext) => Promise<T>;
export declare const isCached: (key: string, context: ActionContext) => boolean;
