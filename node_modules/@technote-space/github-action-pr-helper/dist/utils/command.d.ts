import { Context } from '@actions/github/lib/context';
import { Logger, GitHelper, ApiHelper } from '@technote-space/github-action-helper';
import { GitHub } from '@actions/github';
import { ActionContext, CommandOutput } from '../types';
export declare const clearCache: () => void;
export declare const getApiHelper: (logger: Logger) => ApiHelper;
export declare const clone: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const checkBranch: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<boolean>;
export declare const getDiff: (helper: GitHelper, logger: Logger) => Promise<string[]>;
export declare const getRefDiff: (compare: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<string[]>;
export declare const config: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const merge: (branch: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<boolean>;
export declare const abortMerge: (helper: GitHelper, logger: Logger) => Promise<void>;
export declare const commit: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const push: (branchName: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const isMergeable: (number: number, octokit: GitHub, context: ActionContext) => Promise<boolean>;
export declare const updatePr: (branchName: string, files: string[], output: CommandOutput[], helper: GitHelper, logger: Logger, octokit: GitHub, context: ActionContext) => Promise<boolean>;
export declare const getChangedFiles: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<{
    files: string[];
    output: CommandOutput[];
}>;
export declare const getChangedFilesForRebase: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<{
    files: string[];
    output: CommandOutput[];
}>;
export declare const closePR: (branchName: string, logger: Logger, octokit: GitHub, context: ActionContext, message?: string | undefined) => Promise<void>;
export declare const resolveConflicts: (branchName: string, helper: GitHelper, logger: Logger, octokit: GitHub, context: ActionContext) => Promise<void>;
export declare const getDefaultBranch: (octokit: GitHub, context: Context) => Promise<string>;
export declare const getNewPatchVersion: (helper: GitHelper, context: ActionContext) => Promise<string>;
